# rag/test_phase6.py
from __future__ import annotations
import time
from .router import answer

TESTS = [
    # ---------- GraphRAG: Season/Climate (Crop-level) ----------
    "‡¶Ü‡¶Æ‡¶® ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ì ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶ï‡¶§?",
    "‡¶Ü‡¶â‡¶∂ ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ï‡ßÄ?",
    "‡¶¨‡ßã‡¶∞‡ßã ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶ï‡¶§ ‡¶°‡¶ø‡¶ó‡ßç‡¶∞‡¶ø ‡¶∏‡¶π‡¶®‡ßÄ‡¶Ø‡¶º?",
    "Wheat (‡¶ó‡¶Æ) ‡¶è‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ï‡ßÄ?",
    "Aman rice season?",
    "Boro rice temperature range?",
    "aus ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ?",
    "‡¶∏‡¶π‡¶ú ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶Æ‡¶® ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶¨‡¶≤‡ßã",
    "‡¶¨‡ßã‡¶∞‡ßã ‡¶ß‡¶æ‡¶® ‡¶ï‡ßã‡¶® ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡ßá ‡¶ö‡¶æ‡¶∑ ‡¶π‡¶Ø‡¶º?",
    "Aman ‡¶è‡¶∞ humidity range ‡¶ï‡¶§?",

    # ---------- GraphRAG: District-wise timing from SPAS (if present) ----------
    "‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶® ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∞‡ßã‡¶™‡¶£‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶ñ‡¶®?",
    "‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π‡ßá ‡¶Ü‡¶Æ‡¶® ‡¶ß‡¶æ‡¶® ‡¶ï‡¶æ‡¶ü‡¶æ‡¶á ‡¶ï‡¶¨‡ßá?",
    "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ‡¶§‡ßá ‡¶ó‡¶Æ ‡¶∞‡ßã‡¶™‡¶£/‡¶ï‡¶æ‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡ßÄ?",
    "‡¶¨‡¶ó‡ßÅ‡¶°‡¶º‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶Æ‡¶® ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ï‡ßÄ?",
    "Rangpur ‡¶è Aman transplant window?",

    # ---------- Aliases / Mixed language / Slug tests ----------
    "Aman ‡¶ß‡¶æ‡¶® ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ?",
    "Kharif 2 season crop Aman?",
    "‡¶ñ‡¶∞‡¶ø‡¶´-‡ßß ‡¶ï‡ßã‡¶® ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§?",
    "‡¶∞‡¶¨‡¶ø ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡ßá ‡¶ï‡ßã‡¶® ‡¶ß‡¶æ‡¶® ‡¶ö‡¶æ‡¶∑ ‡¶π‡¶Ø‡¶º?",

    # ---------- Disease queries (will be '‡¶Æ‡¶æ‡¶´ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‚Ä¶' until you load diseases + router disease branch) ----------
    "‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶ï‡ßÄ ‡¶ï‡ßÄ?",
    "‡¶¨‡ßã‡¶∞‡ßã ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶∞‡ßã‡¶ó ‡¶ï‡ßÄ?",
    "‡¶ó‡¶Æ‡ßá‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶ï‡ßÄ?",
    "Tomato diseases list?",

    # ---------- Fertilizer (optional; expect fallback/sorry unless you load fert edges) ----------
    "‡¶ö‡¶æ‡¶≤‡ßá‡¶∞ ‡¶´‡¶≤‡¶® ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶ï‡ßã‡¶® ‡¶∏‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞?",
    "‡¶ó‡¶Æ‡ßá NPK ‡¶°‡ßã‡¶ú ‡¶ï‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§?",

    # ---------- Other crops (add to KG later; good for refusal/fallback) ----------
    "‡¶ï‡ßÅ‡¶Æ‡¶°‡¶º‡¶æ ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ú‡¶≤‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ ‡¶ï‡ßá‡¶Æ‡¶®?",
    "‡¶ü‡¶Æ‡ßá‡¶ü‡ßã ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶ì ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ ‡¶ï‡¶§ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶â‡¶ö‡¶ø‡¶§?",
    "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ï‡ßÄ?",
    "‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ï‡ßÄ?",

    # ---------- Unknown/edge ----------
    "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶´‡¶∏‡¶≤ X ‡¶è‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶ï‡ßÄ?",
    "‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶è‡¶ï ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶¨‡¶≤‡ßã",
]

def run_all(k: int = 5, max_chars: int = 1200):
    for i, q in enumerate(TESTS, 1):
        print(f"\n{i:02d} ‚ùì {q}")
        t0 = time.time()
        try:
            out = answer(q, k=k)
        except Exception as e:
            print(f"üí• ERROR: {e}")
            print("-" * 60)
            continue
        dt = time.time() - t0
        snip = (out or "").strip()
        if len(snip) > max_chars:
            snip = snip[:max_chars] + "‚Ä¶"
        print("‚úÖ ‡¶â‡¶§‡ßç‡¶§‡¶∞:\n", snip)
        print(f"‚è±Ô∏è  {dt:.2f}s")
        print("-" * 60)

def main():
    run_all(k=5)

if __name__ == "__main__":
    main()
